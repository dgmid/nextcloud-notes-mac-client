{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["'use strict'\n\nconst i18n = require( './i18n.min' )\n\nconst { ipcRenderer, shell, remote } = require( 'electron' )\nconst Store\t\t\t\t= require( 'electron-store' )\nconst store\t\t\t\t= new Store()\nconst dialog\t\t\t= remote.dialog\nconst $\t\t\t\t\t= require( 'jquery' )\nconst removeMarkdown\t= require( 'remove-markdown' )\nconst EasyMDE\t\t\t= require( 'easymde' )\nconst hljs\t\t\t\t= require( 'highlight.js' )\nconst entities\t\t\t= require( 'html-entities' )\nconst replaceString\t\t= require('replace-string')\nconst log\t\t\t\t= require( 'electron-log' )\n\nconst fetch\t\t\t\t= require( './fetch.min' )\nconst dates\t\t\t\t= require( './dates.min' )\nconst editor\t\t\t= require( './editor.min' )\nconst categories\t\t= require( './categories.min' )\nconst search\t\t\t= require( './search.min' )\nconst modalWindow\t\t= require( './modal.min' )\n\nlet server \t\t= store.get( 'loginCredentials.server' ),\n\tusername \t= store.get( 'loginCredentials.username' ),\n\tpassword \t= store.get( 'loginCredentials.password' ),\n\teasymde \t= new EasyMDE( editor.easymdeSetup ),\n\tfirstLoad \t= true,\n\tdatabase \t= new Store({\n\t\t\t\t\tname: 'database',\n\t\t\t\t\tnotes: {}\n\t\t\t\t})\n\n\n\n//note(dgmid): log exceptions\n\nwindow.onerror = function( error, url, line ) {\n\t\n\tipcRenderer.send( 'error-in-render', {error, url, line} )\n}\n\n\n\nfunction fetchResult( call, id, body, notes ) {\n\t\n\tswitch( call ) {\n\t\t\t\n\t\tcase 'new': // create new note\n\t\t\t\n\t\t\tstore.set('appInterface.selected', notes.id)\n\t\t\tfetch.apiCall( 'all', null, null, function( call, id, body, notes ) {\n\t\t\t\t\n\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t})\n\t\t\t\n\t\tbreak\n\t\t\n\t\tcase 'save': // save note\n\t\t\t\n\t\t\tfetch.apiCall( 'sidebar', null, null, function( call, id, body, notes ) {\n\t\t\t\t\n\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t})\n\t\t\t\n\t\tbreak\n\t\t\n\t\tcase 'update': // modify existing note\n\t\t\t\n\t\t\t$(`button[data-id=\"${id}\"]`).removeData('favorite')\n\t\t\t$(`button[data-id=\"${id}\"]`).attr('data-favorite', body.favorite)\n\t\t\n\t\tbreak\n\t\t\n\t\tcase 'category':\n\t\t\n\t\t\tfetch.apiCall( 'sidebar', null, null, function( call, id, body, notes ) {\n\t\t\t\t\n\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t})\n\t\t\t\n\t\tbreak\n\t\t\n\t\tcase 'delete': // delete note\n\t\t\t\n\t\t\tlet selected = $('#sidebar li button.selected').attr('data-id')\n\t\t\t\n\t\t\tif( selected == id) {\n\t\t\t\t\n\t\t\t\tresetEditor()\n\t\t\t\t\n\t\t\t\tstore.set( 'appInterface.selected', null )\n\t\t\t\t$('#note').attr('data-id', null)\n\t\t\t\t$('#note').html('')\n\t\t\t\tipcRenderer.send( 'update-titlebar', '' )\n\t\t\t\tipcRenderer.send( 'dock-update-openitem', false )\n\t\t\t}\n\t\t\t\n\t\t\tfetch.apiCall( 'all', null, null, function( call, id, body, notes ) {\n\t\t\t\t\n\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t})\n\t\t\n\t\tbreak\n\t\t\n\t\tcase 'export':\n\t\t\t\n\t\t\tconst exportnote = require( './export.min' )\n\t\t\texportnote.exportNote( notes )\n\t\t\t\n\t\tbreak\n\t\t\n\t\tcase 'sidebar':\n\t\t\t\n\t\t\tlistNotes( notes, 'sidebar' )\n\t\t\t\n\t\tbreak\n\t\t\n\t\tdefault: // get single note or all notes\n\t\t\t\n\t\t\t(id) ? displayNote( notes ) : listNotes( notes )\n\t}\n}\n\n\n\n//note reset editor\n\nfunction resetEditor() {\n\t\n\teasymde.codemirror.setValue('')\n\teasymde.value('')\n\t$('.editor-preview').html('')\n}\n\n\n\n//note(dgmid): codeMirror - insert / wrap text\n\nfunction insertTextAtCursor( text ) {\n\t\n\tlet note = easymde.codemirror.getDoc()\n\tlet cursor = note.getCursor()\n\tnote.replaceRange(text, cursor)\n}\n\nfunction wrapTextToSelection( start, end ) {\n\t\n\tlet note \t\t= easymde.codemirror.getDoc(),\n\t\tselection \t= note.getSelection()\n\tnote.replaceSelection( start + selection + end )\n}\n\nfunction wrapBlockToSelection( start, end ) {\n\t\n\tlet note \t\t= easymde.codemirror.getDoc(),\n\t\tselection \t= note.getSelection(),\n\t\tcursor \t\t= note.getCursor()\n\t\n\tif(selection.length < 1) {\n\t\n\tnote.replaceRange(\n`${start}\n${end}`, cursor)\n\t\n\tcursor = note.getCursor()\n\tlet line = cursor.line -1\n\tnote.setCursor({ line: line })\n\n\t} else {\n\t\t\n\t\twrapTextToSelection(\n`${start}\n`,\n`\n${end}` )\n\t}\n}\n\n\n\n//note(dgmid): generate ordered sidebar entries\n\nfunction listNotes( array, sidebar ) {\n\t\n\tif( sidebar !== null ) database.set('notes', array)\n\t\n\tlet sortby \t= store.get( 'appSettings.sortby' ),\n\t\torderby = store.get( 'appSettings.orderby' ),\n\t\tnoteList = '',\n\t\tallCats = []\n\t\n\tif( array.length > 1 ) {\n\t\t\n\t\tarray.sort(function(x, y) {\n\t\t\t\n\t\t\tvar itemX = x[sortby]\n\t\t\tvar itemY = y[sortby]\n\t\t\t\n\t\t\tif( orderby === 'asc' ) {\n\t\t\t\t\n\t\t\t\treturn (itemX < itemY) ? -1 : (itemX > itemY) ? 1 : 0\n\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\treturn (itemX > itemY) ? -1 : (itemX < itemY) ? 1 : 0\n\t\t\t}\n\t\t})\n\t}\n\t\n\tfor ( let item of array ) {\n\t\t\n\t\tnoteList += addSidebarEntry( item )\n\t\tallCats.push( item.category )\n\t}\n\t\n\t$('#sidebar').html( noteList )\n\t\n\tif( sidebar ) {\n\t\t\n\t\tgetSelected( 'sidebar' )\n\t\n\t} else {\n\t\t\n\t\tgetSelected()\n\t}\n\t\n\tcategories.categoryList( allCats )\n\tcategories.selectCategory( store.get('categories.selected') )\n}\n\n\n\n//note(dgmid): add sidebar entry\n\nfunction addSidebarEntry( item ) {\n\t\n\tlet theDate = new Date( item.modified ),\n\t\tformattedDate = dates.sidebarDate( theDate.getTime() )\n\t\n\tlet\tcatClass = ( item.category ) ? categories.sanitizeCategory( item.category ) : '##none##'\n\t\n\tlet\ttheCat = ( item.category ) ? item.category : i18n.t('app:categories.none', 'Uncategorised')\n\t\n\tlet plainTxt = removeMarkdown( item.content.replace(/(!\\[.*\\]\\(.*\\)|<[^>]*>|>|<)/g, ''))\n\t\n\tif( plainTxt ) {\n\n\t\tplainTxt = plainTxt.substr(0, 120).slice(item.title.length)\n\t\tplainTxt = replaceString(plainTxt, '[x]', '<span class=\"checked\"></span>')\n\t\tplainTxt = replaceString(plainTxt, '[ ]', '<span class=\"unchecked\"></span>')\n\t\t\n\t} else {\n\t\t\n\t\tplainTxt = i18n.t('app:sidebar.notext', 'No additional text')\n\t}\n\t\n\tlet entry = `<li data-id=\"${item.id}\">\n\t\t\t\t\t<button data-id=\"${item.id}\" data-title=\"${item.title}\" data-content=\"\" data-catid=\"${catClass}\" data-category=\"${item.category}\" data-favorite=\"${item.favorite}\" data-timestamp=\"${item.modified}\">\n\t\t\t\t\t\t<span class=\"side-title\">${item.title}</span>\n\t\t\t\t\t\t<span class=\"side-text\">${formattedDate}&nbsp;&nbsp;<span class=\"excerpt\">${plainTxt}</span></span>\n\t\t\t\t\t\t<span class=\"side-cat\">${theCat}</span>\n\t\t\t\t\t</button>\n\t\t\t\t</li>`\n\t\n\treturn entry\n}\n\n\n\n//note(dgmid): display single note\n\nfunction displayNote( note ) {\n\t\n\tlet editing = store.get( 'appSettings.editing' )\n\t\n\tif ( editing === false ) {\n\t\t\n\t\t$('#edit').removeClass('editing')\n\t}\n\t\n\tipcRenderer.send( 'update-titlebar', note.title )\n\tipcRenderer.send( 'dock-update-openitem', true )\n\t\n\tif( easymde ) {\n\t\t\n\t\teasymde.toTextArea()\n\t\teasymde = null\n\t}\n\t\n\teasymde = new EasyMDE( editor.easymdeSetup )\n\ttoggleSpellcheck( store.get('appSettings.spellcheck') )\n\t\n\teasymde.codemirror.on( 'scroll', function( instance, event ) {\n\t\n\t\tlet scroll = instance.getScrollInfo()\n\t\t\n\t\tif( scroll.top > 0 ) {\n\t\t\t\n\t\t\t$('.editor-toolbar').addClass( 'scroll' )\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$('.editor-toolbar').removeClass( 'scroll' )\n\t\t}\n\t})\n\t\n\teasymde.codemirror.on( 'mousedown', function( instance, event ) {\n\t\t\n\t\tinitCheckboxes()\n\t\t\n\t\tif( event.which === 3 ) {\n\t\t\t\n\t\t\tlet selection = easymde.codemirror.doc.getSelection()\n\t\t\t\n\t\t\tipcRenderer.send('show-notes-menu',\n\t\t\t\t{\n\t\t\t\t\tselection: selection,\n\t\t\t\t\tpreview: false\n\t\t\t\t}\n\t\t\t)\n\t\t\treturn\n\t\t}\n\t})\n\t\n\t$('#note').attr('data-id', note.id)\n\teasymde.value( note.content )\n\teasymde.codemirror.clearHistory()\n\t\n\tif( !editing ) {\n\t\t\n\t\teasymde.togglePreview()\n\t\tsetCheckLists()\n\t\tapplyZoom( store.get( 'appSettings.zoom' ) )\n\t\t\n\t\tinsertDate()\n\t\t\n\t} else {\n\t\t\t\n\t\t\teasymde.codemirror.on(\"changes\", initCheckboxes)\n\t\t\t\n\t\t\tif( store.get('appSettings.cursor') == 'end' ) {\n\t\t\t\t\n\t\t\t\teasymde.codemirror.setCursor(easymde.codemirror.lineCount(), 0)\n\t\t\t}\n\t\t\t\n\t\teasymde.codemirror.focus()\n\t}\n\t\n\t$('.loader').fadeOut(400, function() { $(this).remove() } )\n\t\n\tif( firstLoad === true ) {\n\t\t\n\t\tconst check = require( './version.min' )\n\t\tfirstLoad = 1\n\t\tcheck.appVersion()\n\t\t\n\t\tsetFocus()\n\t}\n}\n\n\n\n//note(dgmid): get selected note\n\nfunction getSelected( sidebar ) {\n\t\n\tlet selected = store.get( 'appInterface.selected' )\n\t\n\tif( selected ) {\n\t\t\n\t\tlet selectedbutton = $(`button[data-id=\"${selected}\"]`)\n\t\t\n\t\tselectedbutton.addClass('selected')\n\t\t\n\t\tlet above = aboveSelected( selectedbutton )\n\t\tabove.addClass( 'above-selected' )\n\t\t\n\t\tinsertDate()\n\t\tipcRenderer.send( 'update-titlebar', selectedbutton.data( 'title' ) )\n\t\t\n\t\tif( selectedbutton.length ) {\n\t\t\t\n\t\t\tipcRenderer.send( 'dock-update-openitem', true )\n\t\t}\n\t\t\n\t\tif( !sidebar ) {\n\t\t\t\n\t\t\tfetch.apiCall( 'single', selected, null, function( call, id, body, notes ) {\n\t\t\t\t\n\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t})\n\t\t}\n\t}\n}\n\n\n\n//note(dgmid): new note\n\nfunction newNote() {\n\t\n\tlet body\n\t\n\tswitch( store.get( 'categories.selected' ) ) {\n\t\n\t\tcase '##all##':\n\t\tcase '##none##':\n\t\t\t\n\t\t\tbody = {\n\t\t\t\t\"content\": '# ' +  i18n.t('app:sidebar.new', 'New note')\n\t\t\t}\n\t\t\t\n\t\tbreak\n\t\t\n\t\tcase '##fav##':\n\t\t\t\n\t\t\tbody = {\n\t\t\t\t\"content\": '# ' +  i18n.t('app:sidebar.new', 'New note'),\n\t\t\t\t\"favorite\": true\n\t\t\t}\n\t\t\t\n\t\tbreak\n\t\t\n\t\tdefault:\n\t\t\t\n\t\t\tbody = {\n\t\t\t\t\"content\": '# ' +  i18n.t('app:sidebar.new', 'New note'),\n\t\t\t\t\"category\": $('.categories li button.selected').data('category')\n\t\t\t}\n\t}\n\t\n\tfetch.apiCall( 'new', null, body, function( call, id, body, notes ) {\n\t\t\n\t\tfetchResult( call, id, body, notes )\n\t})\n}\n\n\n//note(dgmid): edit note\n\nfunction editNote() {\n\t\n\tlet selected = store.get( 'appInterface.selected' )\n\t\n\tif( selected ) {\n\t\t\n\t\tif( easymde.isPreviewActive() ) {\n\t\t\n\t\t\t$('#edit').attr('title', i18n.t('app:main.button.save', 'Save Note')).addClass('editing')\n\t\t\teasymde.togglePreview()\n\t\t\teasymde.codemirror.focus()\n\t\t\tinitCheckboxes()\n\t\t\teasymde.codemirror.on(\"changes\", initCheckboxes)\n\t\t\t\n\t\t\tstore.set( 'appSettings.editing', true  )\n\t\t\t\n\t\t\tif( store.get('appSettings.cursor') == 'end' ) {\n\t\t\t\t\n\t\t\t\teasymde.codemirror.setCursor(easymde.codemirror.lineCount(), 0)\n\t\t\t}\n\t\t\t\n\t\t\tipcRenderer.send( 'update-touchbar', true )\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tprepareToSave( selected )\n\t\t}\n\t}\n}\n\n\n\n//editor checkboxes - based on https://github.com/nextcloud/notes/issues/117\n//note(dgmid): init checkboxes\n\nfunction initCheckboxes() {\n\t\n\t$('.cm-formatting-task').off('click.toggleEditorCheckboxes').on('click.toggleEditorCheckboxes', function (event) {\n\t\t\n\t\t$('.cm-formatting-task').off('click.toggle_checkbox')\n\t\t\n\t\tevent.stopPropagation()\n\t\tevent.preventDefault()\n\t\ttoggleEditorCheckboxes( $(this) )\n\t})\n}\n\n\n\n//note(dgmid): toggle checkbox state\n\nfunction toggleEditorCheckboxes( element ) {\n\t\n\tlet doc \t= easymde.codemirror.getDoc(),\n\t\tindex \t= element.parents( '.CodeMirror-line' ).index(),\n\t\tline \t= doc.getLineHandle( index )\n\t\n\tlet newvalue = ( element.text() == '[x]' ) ? '[ ]' : '[x]'\n\t\n\tdoc.replaceRange(\n\t\tnewvalue,\n\t\t{\n\t\t\tline: index,\n\t\t\tch: line.text.indexOf( '[' )\n\t\t},\n\t\t{\n\t\t\tline: index,\n\t\t\tch: line.text.indexOf( ']' ) + 1\n\t\t}\n\t)\n\n\teasymde.codemirror.execCommand( 'goLineEnd' )\n}\n\n\n\n//note(dgmid): insert date in to note\n\nfunction insertDate() {\n\t\n\tlet timestamp = $('#sidebar button.selected').data( 'timestamp' )\n\t\n\t$('#datetime').remove()\n\t$('.editor-preview').prepend(`<time id=\"datetime\">${dates.titlebarDate( timestamp )}</time>`)\n}\n\n\n\n//note(dgmid): prepare to save\n\nfunction prepareToSave( selected ) {\n\t\n\tif( easymde.codemirror.historySize().undo > 0 ) {\n\t\t\n\t\tsaveDialog( selected )\n\t}\n\t\n\teasymde.togglePreview()\n\tinsertDate()\n\t\n\t$('.editor-toolbar button').removeClass('active')\n\t$('#edit').attr('title', i18n.t('app:main.button.edit', 'Edit Note')).removeClass('editing').focus()\n\tsetCheckLists()\n\t\n\tstore.set( 'appSettings.editing', false )\n\t\n\tipcRenderer.send( 'update-touchbar', false )\n}\n\n\n\n//note(dgmid): save dialog\n\nfunction saveDialog( selected ) {\n\t\n\tlet response = dialog.showMessageBoxSync(remote.getCurrentWindow(), {\n\t\t\t\t\ttype: 'question',\n\t\t\t\t\tmessage: i18n.t('app:dialog.save.title', 'You have made changes to this note'),\n\t\t\t\t\tdetail: i18n.t('app:dialog.save.text', 'Do you want to save them?'),\n\t\t\t\t\tbuttons: [i18n.t('app:dialog.button.savechanges', 'Save changes'), i18n.t('app:dialog.button.cancel', 'Cancel')]\n\t\t\t\t})\n\t\n\tif( response === 0 ) {\n\t\t\n\t\tlet body = {\n\t\t\t\"content\": easymde.value(),\n\t\t\t\"modified\": Math.floor(Date.now() / 1000)\n\t\t}\n\t\t\n\t\teasymde.codemirror.clearHistory()\n\t\t\n\t\tfetch.apiCall( 'save', selected, body, function( call, id, body, notes ) {\n\t\t\t\n\t\t\tfetchResult( call, id, body, notes )\n\t\t})\n\t\t\n\t} else {\n\n\t\twhile ( easymde.codemirror.historySize().undo > 0) easymde.codemirror.undo()\n\t\tipcRenderer.send( 'quit-app', '' )\n\t}\n}\n\n\n\n//note(dgmid): save note\n\nfunction saveNote( id ) {\n\t\n\tif(\t!easymde.isPreviewActive() && easymde.codemirror.historySize().undo > 0 ) {\n\t\t\n\t\tlet body = {\n\t\t\t\"content\": easymde.value(),\n\t\t\t\"modified\": Math.floor(Date.now() / 1000)\n\t\t}\n\t\t\t\t\t\n\t\teasymde.codemirror.clearHistory()\n\t\t\n\t\tfetch.apiCall( 'save', id, body, function( call, id, body, notes ) {\n\t\t\t\n\t\t\tfetchResult( call, id, body, notes )\n\t\t})\n\t}\n}\n\n\n\n//note(dgmid): delete check\n\nfunction deleteCheck( id ) {\n\t\n\tlet response = dialog.showMessageBoxSync(remote.getCurrentWindow(), {\n\t\t\t\t\t\t\ttype: 'warning',\n\t\t\t\t\t\t\tmessage: i18n.t('app:dialog.delete.title', 'Are you sure you want to delete this note?'),\n\t\t\t\t\t\t\tdetail: i18n.t('app:dialog.delete.text', 'This operation is not reversable.'),\n\t\t\t\t\t\t\tbuttons: [i18n.t('app:dialog.button.delete', 'Delete Note'), i18n.t('app:dialog.button.cancel', 'Cancel')]\n\t\t\t\t\t\t})\n\t\t\n\tif( response === 0 ) {\n\t\t\n\t\tfetch.apiCall( 'delete', id, null, function( call, id, body, notes ) {\n\t\t\t\n\t\t\tfetchResult( call, id, body, notes )\n\t\t})\n\t}\n}\n\n\n\n//note(dgmid): apply zoom level\n\nfunction applyZoom( level ) {\n\t\n\t$('.editor-preview').css({ \"font-size\": `${level/10}rem` })\n}\n\n\n\n//note(dgmid): toggle spellcheck\n\nfunction toggleSpellcheck( state ) {\n\t\n\t( state ) ? $('.CodeMirror-code').attr('spellcheck', true)  : $('.CodeMirror-code').attr('spellcheck', false)\n\t\n\t$('.CodeMirror').each( function( i, element ) {\n\t\t\n\t\telement.CodeMirror.refresh()\n\t})\n}\n\n\n\n//note(dgmid): set zoom slider\n\nipcRenderer.on('set-zoom-slider', (event, message) => {\n\t\n\tapplyZoom( message )\n})\n\n\n\n//note(dgmid): reload sidebar\n\nipcRenderer.on('reload-sidebar', (event, message) => {\n\t\n\tif( message === 'login' ) {\n\t\t\n\t\tserver \t\t= store.get( 'loginCredentials.server' ),\n\t\tusername \t= store.get( 'loginCredentials.username' ),\n\t\tpassword \t= store.get( 'loginCredentials.password' )\n\t\t\n\t\tlog.info( `${message} completed` )\n\t\t\n\t\tfetch.apiCall( 'all', null, null, function( call, id, body, notes ) {\n\t\t\t\n\t\t\tfetchResult( call, id, body, notes )\n\t\t})\n\t\n\t} else if( message === 'logout' ) {\n\t\t\n\t\tserver = username = password = null\n\t\t\n\t\tresetEditor()\n\t\t$('#sidebar, #categories').empty()\n\t\n\t} else {\n\t\t\n\t\tfetch.apiCall( 'sidebar', null, null, function( call, id, body, notes ) {\n\t\t\t\n\t\t\tfetchResult( call, id, body, notes )\n\t\t})\n\t}\n})\n\n\n\n//note(dgmid): spellcheck\n\nipcRenderer.on('spellcheck', (event, message) => {\n\t\n\tlet state = ( message ) ? false : true\n\t\n\tstore.set('appSettings.spellcheck', state)\n\ttoggleSpellcheck( state )\n})\n\n\n\n//note(dgmid): display categories\n\nipcRenderer.on('showcats', (event, message) => {\n\t\n\tcategories.toggleCategories( message )\n})\n\n\n\n//note(dgmid): update-theme\n\nipcRenderer.on('set-theme', (event, message) => {\n\t\n\t__setTheme()\n})\n\n\n\n//note(dgmid): toggle-sidebar\n\nipcRenderer.on('toggle-categories', (event, message) => {\n\t\n\t$('#frame, footer').toggleClass('slide')\n\t\n\tlet cats = store.get( 'appInterface.categories' ) ? false : true\n\tstore.set( 'appInterface.categories', cats )\n})\n\n\n\n//note(dgmid): toggle category count\n\nipcRenderer.on('toggle-catcount', (event, message) => {\n\t\n\t$('.cat-count').toggleClass('show')\n\t\n\tlet count = store.get( 'appSettings.catcount' ) ? false : true\n\tstore.set( 'appSettings.catcount', count )\n})\n\n\n\n//note(dgmid): toggle category icons is sidebar\n\nipcRenderer.on('toggle-caticons', (event, message) => {\n\t\n\t$('#sidebar').toggleClass('showcats')\n\t\n\tlet icons = store.get( 'appSettings.showcats' ) ? false : true\n\tstore.set( 'appSettings.showcats', icons )\n})\n\n\n\n//note(dgmid): log in modal\n\nipcRenderer.on('open-login-modal', (event, message) => {\n\t\n\tmodalWindow.openModal( `file://${__dirname}/../html/login.html`, 480, 210, false )\n})\n\n\n\n//note(dgmid): close login modal\n\nipcRenderer.on('close-login-modal', (event, message) => {\n\t\n\tmodalWindow.closeModal\n})\n\n\n\n//note(dgmid): note menu commands\n\nipcRenderer.on('note', (event, message) => {\n\t\n\tlet selected = store.get( 'appInterface.selected' )\n\t\n\tswitch( message ) {\n\t\t\n\t\tcase 'new':\t\n\t\t\tnewNote()\n\t\tbreak\n\t\t\n\t\tcase 'edit':\n\t\t\tif( selected ) editNote( selected )\n\t\tbreak\n\t\t\n\t\tcase 'save':\n\t\t\tif( selected ) saveNote( selected )\n\t\tbreak\n\t\t\n\t\tcase 'open':\n\t\t\tif( server && selected ) {\n\t\t\t\t\n\t\t\t\tshell.openExternal( `${server}/index.php/apps/notes/note/${selected}` )\n\t\t\t}\n\t\tbreak\n\t\t\n\t\tcase 'favorite':\n\t\t\tif( selected ) {\n\t\t\t\n\t\t\t\tlet favorite = ( $(`#sidebar li button[data-id=\"${selected}\"]`).attr('data-favorite') == 'true' ) ? false : true\n\t\t\t\t\n\t\t\t\tfetch.apiCall( 'update', selected, {\"favorite\": favorite}, function( call, id, body, notes ) {\n\t\t\t\t\t\n\t\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t\t})\n\t\t\t}\n\t\tbreak\n\t\t\n\t\tcase 'newcat':\n\t\t\t\n\t\t\tif( selected ) {\n\t\t\t\tmodalWindow.openModal( `file://${__dirname}/../html/new-category.html?id=${selected}`, 480, 180, false )\n\t\t\t}\n\t\tbreak\n\t\t\n\t\tcase 'import':\n\t\t\t\n\t\t\tconst importfile = require( './import.min' )\n\t\t\t\n\t\t\timportfile.importFile( function( filename, body ) {\n\t\t\t\t\n\t\t\t\tfetch.apiCall( 'new', null, body, function( call, id, body, notes ) {\n\t\t\t\t\t\n\t\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t\t\t\n\t\t\t\t\tlet importNotification = new Notification('Nextcloud Notes Client', {\n\t\t\t\t\t\t\n\t\t\t\t\t\tbody: i18n.t('app:notification.import.text', 'The file {{filename}} has been imported', { filename: filename })\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t\t\n\t\tbreak\n\t\t\n\t\tcase 'export':\n\t\t\tif( selected ) {\n\t\t\t\t\n\t\t\t\tfetch.apiCall( 'export', selected, null, function( call, id, body, notes ) {\n\t\t\t\t\t\n\t\t\t\t\tfetchResult( call, id, body, notes )\n\t\t\t\t})\n\t\t\t}\n\t\tbreak\n\t\t\n\t\tcase 'delete':\n\t\t\tif( selected ) deleteCheck( selected )\n\t\tbreak\n\t\t\n\t\tcase 'print':\n\t\t\t\n\t\t\tlet colors = $('html').data( 'colors' )\n\t\t\t\n\t\t\tif( easymde.isPreviewActive() ) {\n\t\t\t\n\t\t\t\tlet note = $('.editor-preview').html()\n\t\t\t\tipcRenderer.send( 'print-preview', { \"note\": note, \"colors\": colors } )\n\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tprepareToSave( selected )\n\t\t\t\t\n\t\t\t\tif( easymde.codemirror.historySize().undo > 0 ) {\n\t\t\t\t\t\n\t\t\t\t\tsaveDialog( selected )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teasymde.togglePreview()\n\t\t\t\t$('.editor-toolbar button').removeClass('active')\n\t\t\t\t$('#edit').attr('title', i18n.t('app:main.button.edit', 'Edit Note')).removeClass('editing').focus()\n\t\t\t\tsetCheckLists()\n\t\t\t\t\n\t\t\t\tstore.set( 'appSettings.editing', false  )\n\t\t\t\t\n\t\t\t\tlet note = $('.editor-preview').html()\n\t\t\t\tipcRenderer.send( 'print-preview', { \"note\": note, \"colors\": colors } )\n\t\t\t}\n\t\t\t\n\t\tbreak\n\t\t\n\t\tcase 'selectall':\n\t\t\t\n\t\t\tif( $('#search').is(':focus') ) {\n\t\t\t\t\n\t\t\t\t$('#search').select()\n\t\t\t\t\n\t\t\t} else if( !easymde.isPreviewActive() ) {\n\t\t\t\t\n\t\t\t\teasymde.codemirror.execCommand('selectAll')\n\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tlet selection,\n\t\t\t\t\trange,\n\t\t\t\t\telement = $('.editor-preview-active')[0]\n\t\t\t\t\n\t\t\t\twindow.getSelection().empty()\n\t\t\t\tselection = window.getSelection()\n\t\t\t\t\n\t\t\t\tif( selection.toString() == '' ) {\n\t\t\t\t\t\n\t\t\t\t\twindow.setTimeout(function(){\n\t\t\t\t\t\trange = document.createRange()\n\t\t\t\t\t\trange.selectNodeContents(element)\n\t\t\t\t\t\tselection.removeAllRanges()\n\t\t\t\t\t\tselection.addRange(range)\n\t\t\t\t\t}, 1)\n\t\t\t\t}\n\t\t\t}\n\t\tbreak\n\t\t\n\t\tcase 'find':\n\t\t\tif( store.get( 'appInterface.categories' ) === false ) {\n\t\t\t\t\n\t\t\t\t$('#frame, footer').addClass('slide')\n\t\t\t\tstore.set( 'appInterface.categories', true )\n\t\t\t}\n\t\t\t\n\t\t\t$('#search').focus()\n\t\tbreak\n\t}\n})\n\n\n\n//note(dgmid): markdown menu & touchbar commands\n\nipcRenderer.on('markdown', (event, message) => {\n\t\n\tif( !easymde.isPreviewActive() ) {\n\t\t\n\t\tswitch( message ) {\n\t\t\t\n\t\t\tcase 'heading':\n\t\t\t\teasymde.toggleHeadingSmaller()\n\t\t\tbreak\n\t\t\tcase 'h1':\n\t\t\t\teasymde.toggleHeading1()\n\t\t\tbreak\n\t\t\tcase 'h2':\n\t\t\t\teasymde.toggleHeading2()\n\t\t\tbreak\n\t\t\tcase 'h3':\n\t\t\t\teasymde.toggleHeading3()\n\t\t\tbreak\n\t\t\tcase 'h4':\n\t\t\t\teasymde.toggleHeading4()\n\t\t\tbreak\n\t\t\tcase 'h5':\n\t\t\t\teasymde.toggleHeading5()\n\t\t\tbreak\n\t\t\tcase 'h6':\n\t\t\t\teasymde.toggleHeading6()\n\t\t\tbreak\n\t\t\tcase 'b':\n\t\t\t\teasymde.toggleBold()\n\t\t\tbreak\n\t\t\tcase 'i':\n\t\t\t\teasymde.toggleItalic()\n\t\t\tbreak\n\t\t\tcase 'del':\n\t\t\t\teasymde.toggleStrikethrough()\n\t\t\tbreak\n\t\t\tcase 'ul':\n\t\t\t\teasymde.toggleUnorderedList()\n\t\t\tbreak\n\t\t\tcase 'ol':\n\t\t\t\teasymde.toggleOrderedList()\n\t\t\tbreak\n\t\t\tcase 'cl':\n\t\t\t\teasymde.codemirror.replaceSelection('- [ ]  ')\n\t\t\t\teasymde.codemirror.focus()\n\t\t\tbreak\n\t\t\tcase 'a':\n\t\t\t\tmodalWindow.openModal( `file://${__dirname}/../html/insert-hyperlink.html`, 480, 180, false )\n\t\t\tbreak\n\t\t\tcase 'img':\n\t\t\t\teasymde.drawImage()\n\t\t\tbreak\n\t\t\tcase 'code':\n\t\t\t\teasymde.toggleCodeBlock()\n\t\t\tbreak\n\t\t\tcase 'blockquote':\n\t\t\t\teasymde.toggleBlockquote()\n\t\t\tbreak\n\t\t\tcase 'table':\n\t\t\t\tmodalWindow.openModal( `file://${__dirname}/../html/insert-table.html`, 480, 220, false )\n\t\t\tbreak\n\t\t\tcase 'hr':\n\t\t\t\teasymde.drawHorizontalRule()\n\t\t\tbreak\n\t\t}\n\t}\n})\n\n\n\n//note(dgmid): html submenu menu commands\n\nipcRenderer.on('html', (event, message) => {\n\t\n\t\n\tif( !easymde.isPreviewActive() ) {\n\t\t\n\t\tswitch( message ) {\n\t\t\t\n\t\t\tcase 'small':\n\t\t\tcase 'sup':\n\t\t\tcase 'sub':\n\t\t\tcase 'u':\n\t\t\tcase 'mark':\n\t\t\t\twrapTextToSelection( `<${message}>`, `</${message}>` )\n\t\t\tbreak\n\t\t\tcase 'javascript':\n\t\t\tcase 'json':\n\t\t\tcase 'html':\n\t\t\tcase 'css':\n\t\t\tcase 'scss':\n\t\t\tcase 'php':\n\t\t\tcase 'objective-c':\n\t\t\tcase 'c-like':\n\t\t\tcase 'bash':\n\t\t\t\twrapBlockToSelection( `\\`\\`\\` ${message}`, `\\`\\`\\`` )\n\t\t\tbreak\n\t\t\tcase 'dl':\n\t\t\t\tinsertTextAtCursor(\n`<dl>\n\t<dt>${i18n.t('app:main.title', 'title')}</dt>\n\t<dd>${i18n.t('app:main.description', 'description')}</dd>\n\t<dt>${i18n.t('app:main.title', 'title')}</dt>\n\t<dd>${i18n.t('app:main.description', 'description')}</dd>\n</dl>` )\n\t\t\tbreak\n\t\t}\n\t}\n})\n\n\n\n//note(dgmid): view menu - zoom levels\n\nipcRenderer.on('set-zoom-level', (event, message) => {\n\t\n\tlet zoom = store.get( 'appSettings.zoom' )\n\t\n\tswitch( message ) {\n\t\t\n\t\tcase 1:\n\t\t\tzoom++\n\t\t\tif( zoom > 16 ) zoom = 16\n\t\tbreak\n\t\t\n\t\tcase -1:\n\t\t\tzoom--\n\t\t\tif( zoom < 4 ) zoom = 4\n\t\tbreak\n\t\t\n\t\tdefault:\n\t\t\tzoom = 10\n\t}\n\t\n\tstore.set( 'appSettings.zoom', zoom )\n\tapplyZoom( zoom )\n})\n\n\n\n//note(dgmid): sidebar context menu commands\n\nipcRenderer.on('context-favorite', (event, message) => {\n\t\n\tlet favorite \t= ( message.favorite == 'true' ) ? false : true,\n\t\tid \t\t\t= message.id\n\t\n\tfetch.apiCall( 'update', id, {\"favorite\": favorite}, function( call, id, body, notes ) {\n\t\t\t\n\t\tfetchResult( call, id, body, notes )\n\t})\n})\n\n\nipcRenderer.on('context-export', (event, id) => {\n\t\n\tfetch.apiCall( 'export', id, null, function( call, id, body, notes ) {\n\t\t\t\n\t\tfetchResult( call, id, body, notes )\n\t})\n})\n\n\nipcRenderer.on('context-delete', (event, id) => {\n\t\n\tdeleteCheck( id )\n})\n\n\nipcRenderer.on('context-category', (event, message) => {\n\t\n\tlet id \t\t\t= parseInt( message.id ),\n\t\tcategory\t= message.category,\n\t\tnotes\t\t= database.get('notes')\n\t\n\tlet note = notes.find( x => x.id === id ),\n\t\tbody = {\n\t\t\n\t\t\"modified\": \tnote.modified,\n\t\t\"content\": \t\tnote.content,\n\t\t\"category\":\t\tcategory\n\t}\n\t\n\tfetch.apiCall( 'category', id, body, function( call, id, body, notes ) {\n\t\t\t\n\t\tfetchResult( call, id, body, notes )\n\t})\n})\n\n\nipcRenderer.on('context-newcategory', (event, message) => {\n\t\n\tmodalWindow.openModal( `file://${__dirname}/../html/new-category.html?id=${message}`, 480, 180, false )\n})\n\n\nipcRenderer.on('category-order', (event, message) => {\n\t\n\tstore.set( 'appSettings.ordercats', message )\n\t\n\t$('#categories').removeClass( 'asc desc' ).addClass( message )\n})\n\n\n//note(dgmid): notes context menu commands\n\nipcRenderer.on('context-note-encode', (event, message) => {\n\t\n\tlet encoded = entities.encode( message )\n\teasymde.codemirror.doc.replaceSelection( encoded )\n})\n\n\nipcRenderer.on('context-note-decode', (event, message) => {\n\t\n\tlet decoded = entities.decode( message )\n\teasymde.codemirror.doc.replaceSelection( decoded )\n})\n\n\nipcRenderer.on('context-note-upper', (event, message) => {\n\t\n\teasymde.codemirror.doc.replaceSelection(\n\t\tmessage.toLocaleUpperCase( i18n.language )\n\t)\n})\n\n\nipcRenderer.on('context-note-lower', (event, message) => {\n\t\n\teasymde.codemirror.doc.replaceSelection(\n\t\tmessage.toLocaleLowerCase( i18n.language )\n\t)\n})\n\n\nipcRenderer.on('context-note-caps', (event, message) => {\n\t\n\tlet selection = message.toLocaleLowerCase( i18n.language )\n\teasymde.codemirror.doc.replaceSelection(\n\t\tcapitalize( selection )\n\t)\n})\n\nfunction capitalize( string ) {\n\n\treturn string.replace(/(?:^|\\s)\\S/g,\n\t\tfunction(a) {\n\t\t\treturn a.toLocaleUpperCase( i18n.language )\n\t})\n}\n\n\n\nipcRenderer.on('add-hyperlink', (event, message) => {\n\t\n\tlet note \t\t= easymde.codemirror.getDoc(),\n\t\tselection \t= note.getSelection()\n\t\n\twrapTextToSelection( `[`, `](${message})` )\n\t\teasymde.codemirror.focus()\n\t\n\tif( selection.length < 1 ) {\n\t\t\n\t\tlet cursor = note.getCursor()\n\t\tlet line = cursor.line\n\t\tlet ch = cursor.ch\n\t\t\n\t\tnote.setCursor({ line: line, ch: (ch - 3 - message.length) })\n\t}\n})\n\n\n\nipcRenderer.on('add-table', (event, message) => {\n\t\n\tlet cols \t= message.cols,\n\t\trows \t= message.rows,\n\t\ttable \t= '|'\n\t\n\tfor ( let x = 0; x < cols; x++ ) {\n\t\t\n\t\ttable += ` col ${x+1} |`\n\t}\n\t\n\ttable += '\\n|'\n\t\n\tfor ( let x = 0; x < cols; x++ ) {\n\t\t\n\t\ttable += ` --- |`\n\t}\n\t\n\ttable += '\\n|'\n\t\n\tfor ( let y = 0; y < rows; y++ ) {\n\t\t\n\t\tfor ( let x = 0; x < cols; x++ ) {\n\t\t\t\n\t\t\ttable += ` txt |`\n\t\t}\n\t\t\n\t\ttable += '\\n'\n\t\tif(y < rows - 1) table += '|'\n\t}\n\t\n\tinsertTextAtCursor( table )\n\teasymde.codemirror.focus()\n})\n\n\n\n//note(dgmid): dock menu\n\nipcRenderer.on( 'dock-category', (event, message) => {\n\t\n\t$('.categories button').removeClass('selected')\n\t$( `#fixed-categories [data-catid=\"${message}\"]` ).addClass( 'selected' ).focus()\n\tcategories.selectCategory( message )\n})\n\n\n//note(dgmid): on quit without saving\n\nipcRenderer.on('before-quit', (event, message) => {\n\t\n\tif( easymde.codemirror.historySize().undo > 0 ) {\n\t\t\n\t\tlet selected = store.get( 'appInterface.selected' )\n\t\t\n\t\tif( selected ) {\n\t\t\n\t\t\tsaveDialog( selected )\n\t\t}\n\t\t\n\t} else {\n\t\t\n\t\tipcRenderer.send( 'quit-app', '' )\n\t}\n})\n\n\n\n//note(dgmid): window state\n\nipcRenderer.on('window', (event, message) => {\n\t\n\tif( message  === 'blur') {\n\t\t\n\t\t$('body').addClass('blur')\n\t\n\t} else {\n\t\t\n\t\t$('body').removeClass('blur')\n\t}\n})\n\n\n\n//note(dgmid): on click sidebar button\n\n$('body').on('click', '#sidebar li button', function(event) {\n\t\n\tevent.stopPropagation()\n\tlet selected = store.get( 'appInterface.selected' )\n\t\n\tif( selected &&  easymde.codemirror.historySize().undo > 0 ) {\n\t\n\t\tsaveDialog( selected )\n\t}\n\t\n\tlet id = $(this).data('id')\n\t\n\tipcRenderer.send( 'update-titlebar', '' )\n\t\n\t$('main').append('<div class=\"loader\"><div class=\"spinner\"></div></div>')\n\t\n\t$('#sidebar li button').removeClass('selected').removeClass('above-selected')\n\t$(this).addClass('selected')\n\t\n\tlet above = aboveSelected( $('#sidebar button.selected') )\n\tabove.addClass( 'above-selected' )\n\t\n\tfetch.apiCall( 'single', id, null, function( call, id, body, notes ) {\n\t\t\t\n\t\t\tfetchResult( call, id, body, notes )\n\t\t})\n\t\n\tstore.set( 'appInterface.selected', id )\n})\n\n\n\n//note(dgmid): on right click sidebar button\n\n$('body').on('mouseup', '#sidebar li button', function(event) {\n\t\n\tevent.stopPropagation()\n\t\n\tlet data = {\n\t\t'id': \t\t$(this).data('id'),\n\t\t'title': \t$(this).data('title'),\n\t\t'favorite': $(this).attr('data-favorite'),\n\t\t'category': $(this).attr('data-category'),\n\t\t'catID': \t$(this).attr('data-catid')\n\t}\n\t\n\tif( event.which === 3 ) {\n\t\t\n\t\tipcRenderer.send('show-sidebar-menu', data )\n\t\treturn\n\t}\n})\n\n\n$('body').on('focus', '#sidebar li button', function(event) {\n\t\n\t$(this).parent().prev().children().addClass('above-selected')\n\t\n\tlet above = aboveSelected( $(this) )\n\tabove.addClass( 'above-selected' )\n})\n\n\n$('body').on('focusout', '#sidebar li button', function(event) {\n\t\n\tif( !$(this).hasClass('selected') ) {\n\t\t\n\t\tlet above = aboveSelected( $(this) )\n\t\tabove.removeClass( 'above-selected' )\n\t}\n})\n\n\n\n//note(dgmid): on click empty sidebar container\n\n$('body').on('mouseup', 'aside .inner', function(event) {\n\t\n\tif( event.which === 3 ) {\n\t\n\t\tipcRenderer.send('show-sidebar-menu', null )\n\t}\n})\n\n\n\n//note(dgmid): on click note preview\n\n$('body').on('mouseup', '.editor-preview-active', function(event) {\n\t\n\tif( event.which === 3 ) {\n\t\t\n\t\tipcRenderer.send('show-notes-menu',\n\t\t\t{\n\t\t\t\tselection: '',\n\t\t\t\tpreview: true\n\t\t\t}\n\t\t)\n\t}\n})\n\n\n\n//note(dgmid): open links in default browser\n\n$(document).on('click', 'a[href^=\"http\"]', function(event) {\n\t\n\tevent.preventDefault()\n\tshell.openExternal(this.href)\n})\n\n\n\n//note(dgmid): change category\n\n$('body').on('click', '.categories button', function(event) {\n\t\n\tlet cat = $(this).attr( 'data-category' ),\n\t\tcatid = $(this).attr( 'data-catid' )\n\t\n\t$('.categories button').removeClass('selected')\n\t$(this).addClass('selected')\n\t\n\tstore.set( 'categories.selected', catid )\n\t\n\tcategories.selectCategory( catid )\n\tcategories.showHideCategoryIcons()\n\t\n\tipcRenderer.send( 'dock-update-cats', catid )\n})\n\n\n\n//note(dgmid): keyboard arrow and enter keys\n\ndocument.addEventListener( 'keydown', function( event ) {\n\t\n\tif( easymde.isPreviewActive() ) {\n\t\t\n\t\tlet items\n\t\t\n\t\tswitch( event.which ) {\n\t\t\t\n\t\t\tcase 13:\n\t\t\t\t$(':focus').click().focus()\n\t\t\tbreak\n\t\t\t\n\t\t\tcase 38:\n\t\t\t\t$('#sidebar button').blur()\n\t\t\t\titems = $('#sidebar button.selected').parent('li').prevAll('li:visible')\n\t\t\t\titems.first().find('button').click().focus()\n\t\t\tbreak\n\t\t\t\n\t\t\tcase 40:\n\t\t\t\t$('#sidebar button').blur()\n\t\t\t\titems = $('#sidebar button.selected').parent('li').nextAll('li:visible')\n\t\t\t\titems.first().find('button').click().focus()\n\t\t\tbreak\n\t\t}\n\t}\n})\n\n\n\n//note(dgmid): open update link in default browser\n\n$('body').on('click', '#update', (event) => {\n\t\n\tevent.preventDefault()\n\t\n\tlet link = $('#update').attr( 'data-url' )\n\t\n\tshell.openExternal(link)\n})\n\n\n\n//note(dgmid): remove bullets from checkbox lists\n\nfunction setCheckLists() {\n\t\n\t$('input[type=\"checkbox\"]').parent().css('list-style-type', 'none')\n}\n\n\n\n$('body').on('mouseenter', 'main a', function() {\n\t\n\t$('#location').empty().html( this.href )\n\t$('samp').addClass('show')\n})\n\n$('body').on('mouseleave', 'main a', function() {\n\t\n\t$('samp').removeClass('show')\n})\n\n\n\n//note(dgmid): search\n\n$('#search').bind( 'keyup', function() {\n\t\n\tlet str = $(this).val(),\n\t\tclear = $('#clear')\n\t\n\tlet state = ( str.length > 0 ) ? $('#clear').show() : $('#clear').hide()\n\t\n\tsearch.searchNotes( str, function( result, clean ) {\n\t\t\n\t\tsearchResult( result, clean )\n\t})\n})\n\n\n$('#clear').click(function() {\n\t\n\t$('#search').val('')\n\t$('#result').empty().hide()\n\tcategories.selectCategory( store.get( 'categories.selected' ) )\n\t$('.categories button.selected').focus()\n\t$(this).hide()\n})\n\n\n$('#search').blur( function() {\n\t\n\tif( $(this).val().length < 1 ) {\n\t\t\n\t\t$('#result').hide()\n\t\tcategories.selectCategory( store.get( 'categories.selected' ) )\n\t\t$('.categories button.selected').focus()\n\t}\n})\n\n\n//note(dgmid): initial focus\n\nfunction setFocus() {\n\t\n\tif( store.get( 'appSettings.editing' ) === false ) {\n\t\n\t\tif( store.get( 'appInterface.categories' ) ) {\n\t\t\n\t\t\t$('.categories button.selected').focus()\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$('#sidebar button.selected').focus()\n\t\t}\n\t}\n}\n\n\n\n//note(dgmid): titlebar shadow on preview scroll\n\ndocument.addEventListener('scroll', function (event) {\n\t\n\tif ( $(event.target).hasClass('editor-preview-full') ) {\n\t\t\n\t\tlet position = $('.editor-preview-full').scrollTop()\n\t\t\n\t\tif( position > 0 ) {\n\t\t\t\n\t\t\t$('.editor-toolbar').addClass( 'scroll' )\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$('.editor-toolbar').removeClass( 'scroll' )\n\t\t}\n\t}\n}, true )\n\n\n\n//dgmid(dgmid): get visible item above selected item\n\nfunction aboveSelected( item ) {\n\t\n\tlet $prev = item.parent()\n\t\n\tdo {\n\t\t$prev = $prev.prev()\n\t\t\n\t} while ($prev.length && $prev.is(':hidden'))\n\t\n\treturn $prev.children()\n}\n\n\n//note(dgmid): docready\n\n$(document).ready(function() {\n\t\n\t//note(dgmid): set lang\n\t\n\t$('html').attr('lang', i18n.language)\n\t\n\t\n\t//note(dgmid): display category icons in sidebar \n\t\n\tif( store.get( 'appSettings.showcats' ) ) {\n\t\t\n\t\t$('#sidebar').addClass( 'showcats' )\n\t}\n\t\n\t\n\t//note(dgmid): show or hide categories sidebar\n\t\n\tif( store.get( 'appInterface.categories' ) ) {\n\t\t\n\t\t$('#frame, footer').addClass( 'slide' )\n\t}\n\t\n\t\n\t//note(dgmid): show or hide category counts\n\t\n\tif( store.get( 'appSettings.catcount' ) ) {\n\t\t\n\t\t$('.cat-count').addClass('show')\n\t}\n\t\n\t\n\t//note(dgmid): set edit button state\n\t\n\tif( store.get( 'appSettings.editing' ) === false ) {\n\t\t\n\t\t$('#edit').attr('title', i18n.t('app:main.button.edit', 'Edit Note'))\n\t\n\t} else {\n\t\t\n\t\t$('#edit').attr('title', i18n.t('app:main.button.save', 'Save Note')).addClass('editing')\n\t}\n\t\n\t\n\t//note(dgmid): set categories strings\n\t\n\t$('#cat-title').html( i18n.t('app:categories.title', 'Categories'))\n\t$('#cat-all').html( i18n.t('app:categories.all', 'All notes')).attr('title', i18n.t('app:categories.all', 'All notes'))\n\t$('#cat-fav').html( i18n.t('app:categories.fav', 'Favorites')).attr('title', i18n.t('app:categories.fav', 'Favorites'))\n\t$('#cat-none').html( i18n.t('app:categories.none', 'Uncategorised')).attr('title', i18n.t('app:categories.none', 'Uncategorised'))\n\t$('#search').attr('placeholder', i18n.t('app:sidebar.search', 'Search'))\n\t$('#new-button').attr('title', i18n.t('app:toolbar.new', 'New Note (Cmd-N)'))\n\t$('#delete-button').attr('title', i18n.t('app:toolbar.delete', 'Delete Selected Note (Cmd-D)'))\n\t\n\t\n\t//note(dgmid): check login\n\t\n\tif( !server || !username || !password ) {\n\t\t\n\t\tmodalWindow.openModal( `file://${__dirname}/../html/login.html`, 480, 210, false )\n\t\t\n\t} else {\n\t\t\n\t\tfetch.apiCall( 'all', null, null, function( call, id, body, notes ) {\n\t\t\t\n\t\t\tfetchResult( call, id, body, notes )\n\t\t})\n\t}\n\t\n\t\n\t//note(dgmid): new / delete buttons\n\t\n\t$('#new-button').click(function() {\n\t\t\n\t\tlet $this = $(this)\n\t\tnewNote()\n\t\t\n\t\tsetTimeout( function() {\n\t\t\t\n\t\t\t$this.blur()\n\t\t\n\t\t}, 500)\n\t})\n\t\n\t$('#delete-button').click(function() {\n\t\t\n\t\tlet $this = $(this),\n\t\t\tselected = store.get( 'appInterface.selected' )\n\t\t\n\t\tif( selected ) deleteCheck( selected )\n\t\t\n\t\tsetTimeout( function() {\n\t\t\t\n\t\t\t$this.blur()\n\t\t\n\t\t}, 500)\n\t})\n\t\n\t\n\t//note(dgmid): edit save\n\t\n\t$('#edit').click(function() {\n\t\t\n\t\teditNote()\n\t})\n})\n"],"file":"../app.min.js"}